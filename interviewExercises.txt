// Sample Problem Statement: Given an integer N, print 'hello world' N times. 

// Solutions  

public class Solution {

    public static void main (String args[]) {
        
        Scanner sc = new Scanner(System.in); // Initialize Scanner 

        int n = sc.nextInt(); // Declare varaible to store the number of repetitions 

        for ( int = i ; i < n; i++) {
            System.out.printLn("Hello World!");
        }

        sc.close(); // Close scanner so data is not lost 

    }
     
}

// Another Solution for it ussing bufferedReader


    public class Solution {

        public static void main (String[] args) {

            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

            String line = br.nextLine;      // Reads an input Line  
            int n = Integer.parseInt(line); // Parses the line into int 

            for (int i = 0; i <= n; i++) 
            System.out.printLn("Hello World!")
        }
    }



/*
    BufferedReader :
        Designed mainly for reading text efficiently line by line 
        Is generally faster because it just reads text and doesnâ€™t do parsing unless you explicitly convert.

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());

    Scanner : 
        Designed for pasring input;
        Is slower because it does extra work like tokenizing and parsing the input 

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
*/


// Sample Problem Statement: Write a program that sums the values in an array 

public static int simpleSumArray(List<Integer> ar) {

    int sum = 0;

    for (int i = 0; i < ar.length; i++) {
        sum += ar.get(i);
    }

    return sum;
}

// Diagonal difference (Matrix problem )
// Given a square matrix, calculate the absolute difference between the sums of its diagonals. 

public static int diagonalDifference(List<List<Integer>> arr ) {
        
        int n = arr.size();
        int primarySum = 0;
        int secondarySum = 0;
        
        for (int i = 0; i < n; i++) {
            primarySum += arr.get(i).get(i);
            secondarySum += arr.get(i).get(n-1-i);
        }
        
        return Math.abs(primarySum - secondarySum);
    
}


/*

    Math.abs --> returns an absolute value , which means the signal does not matter
        -5 would give : 5
         5 would give : 5
*/


// Given an array of integers, calculate the ratios of its elements that are positive, negative , and zeros . Print the decimal value of each fraction on a new line with 6 places after the decimal.

  public static void plusMinus(List<Integer> arr) {
        int n = arr.size();
        int positiveNumbers = 0;
        int negativeNumbers = 0;
        int zeros = 0;
        
        for (int i = 0; i < n; i++) {
            if ( arr.get(i) > 0 ) {
                positiveNumbers++;
            } else if ( arr.get(i) < 0 ) {
                negativeNumbers++;
            }   else {
                zeros++;
            }
        }
        
        double positiveRatio = (double) positiveNumbers / n;
        double negativeRatio = (double) negativeNumbers / n;
        double zerosRatio = (double) zeros / n;
        
        System.out.println(positiveRatio + "\n" + negativeRatio + "\n" + zerosRatio);
    }

// Write a program that compares values between two ArrayList

    public static List<Integer> compareTriplets(List<Integer> a, List<Integer> b) {
            int n = a.size();
            int sumA = 0;
            int sumB = 0;
            List<Integer> resultArray = new ArrayList<>();

            for (int i = 0; i < n; i++) {
                if (a.get(i) > b.get(i)) {
                    sumA++;
                } else if (b.get(i) > a.get(i)) {
                    sumB++;
                }
            }

            resultArray.add(sumA);
            resultArray.add(sumB);

            return resultArray;
    }


/*
    List Interface 
        - Maintains insertion order
        - Allows duplicate elements
        - Supports null elements (implementation dependent)
        - Provides index-based access
        - Supports bi-directional traversal via ListIterator

    How to use a list : 

    List<Type> list = new ArrayList<Type>();

    Methods of List class :
        add(Object o)
        add(int index, Object o)
        set(int index, Object o)
        indexOf(Object o)
        lastIndexOf(Object o)
        remove(Object o) 
        remove(int index)
        get(int index)
        contains(Object o)


// Write a program that prints a staircase of size n 

    public static void staircase(int n) {
        for ( int i = 1; i <= n; i++) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            for (int k = 0; k < i; k++) {
                System.out.print("#");
            }
        System.out.println();
        }
    }

// For staircase patterns you gotta print empty spaces and then print the desired character.

public static void miniMaxSum(List<Integer> arr) {
        long total = 0;
        int n = arr.size();
        int min = arr.get(0);
        int max = arr.get(0);
        
        for (int i = 0; i < n; i++) {
            int num = arr.get(i);
            total += num;
            if (num < min) {
                min = num;
            }
            if (num > max) {
                max = num;
            }
        }
        long minSum = total - max;
        long maxSum = total - min;

    System.out.println(minSum + " " + maxSum);

    }