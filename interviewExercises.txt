// Sample Problem Statement: Given an integer N, print 'hello world' N times. 

// Solutions  

public class Solution {

    public static void main (String args[]) {
        
        Scanner sc = new Scanner(System.in); // Initialize Scanner 

        int n = sc.nextInt(); // Declare varaible to store the number of repetitions 

        for ( int = i ; i < n; i++) {
            System.out.printLn("Hello World!");
        }

        sc.close(); // Close scanner so data is not lost 

    }
     
}

// Another Solution for it ussing bufferedReader


    public class Solution {

        public static void main (String[] args) {

            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

            String line = br.nextLine;      // Reads an input Line  
            int n = Integer.parseInt(line); // Parses the line into int 

            for (int i = 0; i <= n; i++) 
            System.out.printLn("Hello World!")
        }
    }



/*
    BufferedReader :
        Designed mainly for reading text efficiently line by line 
        Is generally faster because it just reads text and doesnâ€™t do parsing unless you explicitly convert.

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());

    Scanner : 
        Designed for pasring input;
        Is slower because it does extra work like tokenizing and parsing the input 

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
*/


// Sample Problem Statement: Write a program that sums the values in an array 

public static int simpleSumArray(List<Integer> ar) {

    int sum = 0;

    for (int i = 0; i < ar.length; i++) {
        sum += ar.get(i);
    }

    return sum;
}

// Diagonal difference (Matrix problem )
// Given a square matrix, calculate the absolute difference between the sums of its diagonals. 

public static int diagonalDifference(List<List<Integer>> arr ) {
        
        int n = arr.size();
        int primarySum = 0;
        int secondarySum = 0;
        
        for (int i = 0; i < n; i++) {
            primarySum += arr.get(i).get(i);
            secondarySum += arr.get(i).get(n-1-i);
        }
        
        return Math.abs(primarySum - secondarySum);
    
}


/*

    Math.abs --> returns an absolute value , which means the signal does not matter
        -5 would give : 5
         5 would give : 5
*/


// Given an array of integers, calculate the ratios of its elements that are positive, negative , and zeros . Print the decimal value of each fraction on a new line with 6 places after the decimal.

  public static void plusMinus(List<Integer> arr) {
        int n = arr.size();
        int positiveNumbers = 0;
        int negativeNumbers = 0;
        int zeros = 0;
        
        for (int i = 0; i < n; i++) {
            if ( arr.get(i) > 0 ) {
                positiveNumbers++;
            } else if ( arr.get(i) < 0 ) {
                negativeNumbers++;
            }   else {
                zeros++;
            }
        }
        
        double positiveRatio = (double) positiveNumbers / n;
        double negativeRatio = (double) negativeNumbers / n;
        double zerosRatio = (double) zeros / n;
        
        System.out.println(positiveRatio + "\n" + negativeRatio + "\n" + zerosRatio);
    }

